
using CAS.CommServer.UA.OOI.ConfigurationEditor.DomainsModel;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Serialization;

namespace CAS.CommServer.UA.OOI.ConfigurationEditor.UnitTest
{
  [TestClass]
  public class DomainModelUnitTest
  {
    [TestMethod]
    [DeploymentItem(@"TestData\", @"TestData\")]
    public void TestDeserializeAutoGeneratedXml()
    {
      FileInfo _fi = new FileInfo(@"TestData\DomainModel.xml");
      Assert.IsTrue(_fi.Exists);
      DomainModel _newDescription = null;
      using (Stream _descriptionStream = _fi.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainModel));
        _newDescription = (DomainModel)_serializer.Deserialize(_descriptionStream);
      }
      Assert.IsNotNull(_newDescription);
    }
    [TestMethod]
    public void TypeDictionariesTestMethod()
    {
      DomainModel _dm = TestData.ReferenceDomainModel.GerReferenceDomainModel();
      Assert.IsNotNull(_dm.TypeDictionaries);
      Dictionary<string, TypeDictionaryWitKey> _dictionary = (from x in _dm.TypeDictionaries
                                                              from y in x.StructuredType
                                                              select new TypeDictionaryWitKey { Key = $"{x.TargetNamespace}:{y.Name}", Dictionary = y }).ToDictionary<TypeDictionaryWitKey, string>(z => z.Key);
      Assert.AreEqual<int>(2, _dictionary.Count);
    }
    [TestMethod]
    public void SerializeTestMethod()
    {
      string _fn = "ReferenceDomainModel.xml";
      DomainModel _dm = TestData.ReferenceDomainModel.GerReferenceDomainModel();
      FileInfo _fi = new FileInfo($@"TestData\{_fn}");
      using (Stream _outputStream = _fi.Create())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainModel));
        _serializer.Serialize(_outputStream, _dm);
      }
      Assert.IsTrue(_fi.Exists);
      Assert.IsTrue(_fi.Length > 0);
      using (Stream _descriptionStream = _fi.OpenRead())
      {
        XmlSerializer _serializer = new XmlSerializer(typeof(DomainModel));
        DomainModel _newDescription = (DomainModel)_serializer.Deserialize(_descriptionStream);
        Assert.IsNotNull(_newDescription);
      }
    }
    private class TypeDictionaryWitKey
    {
      public string Key;
      public StructuredType Dictionary;
    }
  }
}
